{"version":3,"sources":["components/DataEntry.js","pages/Home.js","store/uistate.js","store/example.js","store/index.js","panels/panelDefs.js","panels/GoldenLayoutManager.js","components/Icon.js","panels/SideBar.js","config.js","panels/Home.js","App.js","serviceWorker.js","initialize.js","index.js"],"names":["Search","Input","SearchBase","props","placeholder","onSearch","width","react_default","a","createElement","onPressEnter","e","target","value","style","concat","Home","example","this","store","isProcessing","color","es_button","onClick","startProcessing","stopProcessing","whoAmI","React","PureComponent","decorate","toggleSideBar","_this","manager","updateSize","getSelectedItem","setGoldenLayoutManager","closeAll","openAll","componentsList","action","Example","who","name","desc","state","observable","computed","uiState","ItemConfig","title","type","key","component","id","className","DataEntry_SearchBase","observer","hoge","GoldenLayoutManager","instance","initialize","registerComponent","init","console","log","forEach","config","selectedItem","map","item","targetComp","find","newItemConfig","root","contentItems","addChild","length","removeChild","_this2","openPanel","FolderMenuItem","isOpen","text","whiteSpace","icon","marginRight","SideBarMenu","tooltip","placement","COMPONENT_KEYS","getComponentKeys","SideBar","onClickMenuItem","componentName","Icon_SideBarMenu","SideBar_MenuItem","MenuItem","Icon_FolderMenuItem","GoldenLayoutConfig","settings","hasHeaders","constrainDragToContainer","reorderEnabled","selectionEnabled","popoutWholeStack","blockedPopoutsThrowError","closePopoutsOnUnload","showPopoutIcon","showMaximiseIcon","showCloseIcon","dimensions","borderWidth","minItemHeight","minItemWidth","headerHeight","dragProxyWidth","dragProxyHeight","labels","close","maximise","minimise","popout","content","isClosable","_React$PureComponent","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","node","createRef","inherits","createClass","GoldenLayout","window","$","setInstance","lib_default","customClassName","percentage","secondaryInitialSize","onDragEnd","primaryMinSize","secondaryMinSize","panels_SideBar","ref","App","panels_Home_Home","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6OAGQA,SAAWC,EAAXD,OAEFE,EAAa,SAAAC,GAAS,IAChBC,EAAiCD,EAAjCC,YAAaC,EAAoBF,EAApBE,SAAUC,EAAUH,EAAVG,MAC/B,OACIC,EAAAC,EAAAC,cAACT,EAAD,CACAI,YAAaA,EACbC,SAAUA,EACVK,aAAc,SAAAC,GAAC,OAAIN,EAASM,EAAEC,OAAOC,QACrCC,MAAO,CAAER,MAAA,GAAAS,OAAYT,EAAZ,kBCcFU,mLAtBJ,IACCC,EAAYC,KAAKf,MAAMgB,MAAvBF,QACFG,EAAeH,EAAQG,aAAeb,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,4BAA8BF,EAAAC,EAAAC,cAAA,sBAC/E,OACEF,EAAAC,EAAAC,cAAA,OAAKK,MAAO,CAAEO,MAAO,UACnBd,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,wBAEFF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAQC,QAAS,kBAAMN,EAAQO,oBAA/B,SACAjB,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAQC,QAAS,kBAAMN,EAAQQ,mBAA/B,QACAlB,EAAAC,EAAAC,cAAA,WACGW,EACDb,EAAAC,EAAAC,cAAA,SAAIQ,EAAQS,kBAfLC,IAAMC,sBCwBVC,+DArBXC,cAAgB,WACZC,EAAKC,QAAQC,mBAGjBC,gBAAkB,WACd,OAAOH,EAAKC,QAAQE,sBAGxBC,uBAAyB,SAACH,GACtBD,EAAKC,QAAUA,QAGnBI,SAAW,WACPL,EAAKC,QAAQI,iBAGjBC,QAAU,SAAAC,GACNP,EAAKC,QAAQK,QAAQC,KAII,CAC7BR,cAAeS,IACfL,gBAAiBK,IACjBH,SAAUG,IACVF,QAASE,MC7BPC,mDAEFpB,cAAe,OACfqB,IAAM,CACFC,KAAM,OACNC,KAAM,yFAINzB,KAAKE,cAAe,2CAIpBF,KAAKE,cAAe,iCAIpB,IAAMwB,EAAQ1B,KAAKE,aAAe,aAAe,WACjD,eAAAL,OAAgBG,KAAKuB,IAAIC,KAAzB,oBAAA3B,OAAgDG,KAAKuB,IAAIE,KAAzD,KAAA5B,OAAiE6B,YAK1Df,cAASW,EAAS,CAC7BpB,aAAcyB,IACdrB,gBAAiBe,IACjBd,eAAgBc,IAChBb,OAAQoB,MCrBG3B,EALD,CACV4B,QAAS,IAAIA,EACb9B,QAAS,IAAIA,GCsBX+B,EAAa,CACjB,CAAEC,MAAO,SAAUC,KAAM,kBAAmBC,IAAK,QAASC,2LApBtD,OACE7C,EAAAC,EAAAC,cAAA,OAAK4C,GAAG,QAAQC,UAAU,OACxB/C,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAC8C,EAAD,CAAQjD,MAAO,IAAKD,SAAUa,KAAKf,MAAME,mBAL/BsB,IAAMC,gBAuBxB,CAAEqB,MAAO,SAAUC,KAAM,kBAAmBC,IAAK,QAASC,2LAVtD,OACE7C,EAAAC,EAAAC,cAAA,OAAK4C,GAAG,QAAQC,UAAU,OACxB/C,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAC8C,EAAD,CAAQjD,MAAO,IAAKD,SAAUa,KAAKf,MAAME,mBAL7BsB,IAAMC,gBAa1B,CAAEqB,MAAO,OAAQC,KAAM,kBAAmBC,IAAK,OAAQC,UAAWI,YAASxC,GAAOb,MAAO,CAAEgB,MAAOA,EAAOsC,KAAM,OCqClGC,2GA7DQC,GACfzC,KAAKyC,SAAWA,EAChBzC,KAAK0C,kDAIL1C,KAAK2C,oBACL3C,KAAKyC,SAASG,OACdC,QAAQC,IAAI,mFAGW,IAAAjC,EAAAb,KACvB8B,EAAWiB,QAAQ,SAAAC,GACjBnC,EAAK4B,SAASE,kBAAkBK,EAAOf,IAAKe,EAAOd,kDAKrDlC,KAAKyC,SAAS1B,uDAId,OAAOf,KAAKyC,SAASQ,wDAIrB,OAAOnB,EAAWoB,IAAI,SAAAC,GAClB,OAAOA,EAAKlB,wCAIHC,GACX,IAAMkB,EAAatB,EAAWuB,KAAK,SAAAF,GAC/B,OAAOA,EAAKlB,MAAQC,IAElBoB,EAAgB,CACpBvB,MAAOG,EACPF,KAAM,kBACNE,UAAWA,EACXjD,MAAOmE,EAAWnE,OAEHe,KAAKyC,SAASc,KAAKC,aAC3B,GAAGC,SAASH,sCAIvB,IAAME,EAAexD,KAAKyC,SAASc,KAAKC,cAAgB,GACxD,GAAIA,EAAaE,OAAS,EACtB,KAAMF,EAAa,GAAGA,aAAaE,OAAS,GACxCF,EAAa,GAAGG,YAAYH,EAAa,GAAGA,aAAa,sCAKpD,IAAAI,EAAA5D,KACb8B,EAAWiB,QAAQ,SAAAb,GACf0B,EAAKC,UAAU3B,EAAUD,iCC3D/B6B,EAAiB,SAAA7E,GAAS,IACtB8E,EAA0B9E,EAA1B8E,OAAQ1D,EAAkBpB,EAAlBoB,QAAS2D,EAAS/E,EAAT+E,KACnBxC,EAAOuC,EAAS,cAAgB,SACtC,OACE1E,EAAAC,EAAAC,cAAA,QAAMc,QAASA,EAAST,MAAO,CAAEqE,WAAY,WAC3C5E,EAAAC,EAAAC,cAAC2E,EAAA,EAAD,CAAMlC,KAAMR,EAAM5B,MAAO,CAAEuE,YAAa,SACvCH,IAKDI,EAAc,SAAAnF,GAAS,IACnBiC,EAAsBjC,EAAtBiC,SAAUC,EAAYlC,EAAZkC,QAClB,OACE9B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,MAAI6C,UAAU,gBACZ/C,EAAAC,EAAAC,cAAA,MAAI6C,UAAU,qBACZ/C,EAAAC,EAAAC,cAAC8E,EAAA,EAAD,CAASC,UAAU,cAAcvC,MAAM,iBACrC1C,EAAAC,EAAAC,cAAA,QAAMc,QAASc,GACb9B,EAAAC,EAAAC,cAAC2E,EAAA,EAAD,CAAMlC,KAAK,mBAIjB3C,EAAAC,EAAAC,cAAA,MAAI6C,UAAU,qBACZ/C,EAAAC,EAAAC,cAAC8E,EAAA,EAAD,CAASC,UAAU,cAAcvC,MAAM,kBACrC1C,EAAAC,EAAAC,cAAA,QAAMc,QAASa,GACb7B,EAAAC,EAAAC,cAAC2E,EAAA,EAAD,CAAMlC,KAAK,uBCzBnBuC,EAAkB/B,EAAoBgC,mBAEtCC,6MAEJC,gBAAkB,SAAAC,GAChBnC,EAAoBqB,UAAUc,4EAGvB,IAAAf,EAAA5D,KACP,OACEX,EAAAC,EAAAC,cAAA,OAAK6C,UAAU,eACb/C,EAAAC,EAAAC,cAAA,OAAK6C,UAAU,iBACb/C,EAAAC,EAAAC,cAAA,oBAEFF,EAAAC,EAAAC,cAACqF,EAAD,CAAazD,QAASnB,KAAKf,MAAMkC,QAASD,SAAUlB,KAAKf,MAAMiC,WAC/D7B,EAAAC,EAAAC,cAAA,MAAI4C,GAAG,kBACJoC,EAAerB,IAAI,SAAAjB,GAClB,OAAO5C,EAAAC,EAAAC,cAACsF,EAAD,CAAU5C,IAAKA,EAAK5B,QAASuD,EAAKc,gBAAiBV,KAAM/B,eAftDxB,IAAMC,eAuBtBoE,EAAW,SAAA7F,GAAS,IAChB+E,EAAkB/E,EAAlB+E,KAAM3D,EAAYpB,EAAZoB,QACd,OACEhB,EAAAC,EAAAC,cAAA,MAAI6C,UAAU,oBACZ/C,EAAAC,EAAAC,cAACwF,EAAD,CACEf,KAAMA,EACND,QAAQ,EACR1D,QAAS,kBAAMA,EAAQ2D,QAMhBS,IC1CTO,EAAqB,CACzBC,SAAU,CACRC,YAAY,EACZC,0BAA0B,EAC1BC,gBAAgB,EAChBC,kBAAkB,EAClBC,kBAAkB,EAClBC,0BAA0B,EAC1BC,sBAAsB,EACtBC,gBAAgB,EAChBC,kBAAkB,EAClBC,eAAe,GAEjBC,WAAY,CACVC,YAAa,GACbC,cAAe,GACfC,aAAc,GACdC,aAAc,GACdC,eAAgB,IAChBC,gBAAiB,KAEnBC,OAAQ,CACNC,MAAO,QACPC,SAAU,WACVC,SAAU,WACVC,OAAQ,sBAEVC,QAAS,CACP,CACExE,KAAM,MACNyE,YAAY,EACZD,QAAS,MCnBF1G,EAAb,SAAA4G,GACE,SAAA5G,EAAYb,GAAO,IAAA4B,EAAA,OAAA8F,OAAAC,EAAA,EAAAD,CAAA3G,KAAAF,IACjBe,EAAA8F,OAAAE,EAAA,EAAAF,CAAA3G,KAAA2G,OAAAG,EAAA,EAAAH,CAAA7G,GAAAiH,KAAA/G,KAAMf,KACD+H,KAAOvG,IAAMwG,YAFDpG,EADrB,OAAA8F,OAAAO,EAAA,EAAAP,CAAA7G,EAAA4G,GAAAC,OAAAQ,EAAA,EAAAR,CAAA7G,EAAA,EAAAmC,IAAA,oBAAAtC,MAAA,WAMI,IAAM8C,EAAW,IAAI2E,IACnBpC,EACAqC,OAAOC,EAAE,kBAEX9E,EAAoB+E,YAAY9E,GAChCzC,KAAKf,MAAMgB,MAAM4B,QAAQZ,uBAAuBuB,KAXpD,CAAAP,IAAA,SAAAtC,MAAA,WAcW,IAAAiE,EAAA5D,KACC6B,EAAY7B,KAAKf,MAAMgB,MAAvB4B,QAER,OACExC,EAAAC,EAAAC,cAAA,OAAK6C,UAAU,OACb/C,EAAAC,EAAAC,cAACiI,EAAAlI,EAAD,CACCmI,gBAtByB,kBAuBxBC,YAAY,EACZC,qBAzBoB,GA0BpBC,UAAW/F,EAAQjB,cACnBiH,eA7Be,EA8BfC,iBA7Ba,IA+BbzI,EAAAC,EAAAC,cAACwI,EAAD,CAAS5G,QAASU,EAAQV,QAASD,SAAUW,EAAQX,SAAUN,cAAeiB,EAAQjB,gBACtFvB,EAAAC,EAAAC,cAAA,OAAK4C,GAAG,gBACN9C,EAAAC,EAAAC,cAAA,OAAK6C,UAAU,oBACb/C,EAAAC,EAAAC,cAAA,kHAEFF,EAAAC,EAAAC,cAAA,OAAKyI,IAAK,SAAAhB,GAAI,OAAKpD,EAAKoD,KAAOA,YAhC3ClH,EAAA,CAA0BW,IAAMC,kDCFhC4B,YAASxC,GAUMmI,MARf,WACE,OACE5I,EAAAC,EAAAC,cAAA,OAAK6C,UAAU,OACb/C,EAAAC,EAAAC,cAAC2I,EAAD,CAAMjI,MAAOA,EAAO+H,IAAKvH,IAAMwG,gBCHjBkB,QACW,cAA7Bd,OAAOe,SAASC,UAEe,UAA7BhB,OAAOe,SAASC,UAEhBhB,OAAOe,SAASC,SAASC,MACvB,gFCbFjB,OAAO5G,MAAQA,IACf4G,OAAOkB,SAAWA,IAClBlB,OAAOC,EAAIA,ICCfiB,IAASC,OAAOnJ,EAAAC,EAAAC,cAACkJ,EAAD,MAASC,SAASC,eAAe,SFyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.97b1565e.chunk.js","sourcesContent":["import React from \"react\";\nimport { Input } from \"antd\";\n\nconst { Search } = Input;\n\nconst SearchBase = props => {\n    const { placeholder, onSearch, width } = props;\n    return (\n        <Search\n        placeholder={placeholder}\n        onSearch={onSearch}\n        onPressEnter={e => onSearch(e.target.value)}\n        style={{ \"width\": `${width}px` }}\n      />\n    )\n};\n\nexport { SearchBase as Search };\n","import React from \"react\";\nimport { Button } from \"antd\";\n\nclass Home extends React.PureComponent {\n  render() {\n    const { example } = this.props.store;\n    const isProcessing = example.isProcessing ? <div><p>Now Loading...</p></div> : <p>Sleeping.</p>\n    return (\n      <div style={{ color: \"white\" }}>\n        <div>\n          <h3>Home Menu</h3>\n        </div>\n        <div>\n          <h5>Example Usages</h5>\n          <Button onClick={() => example.startProcessing()}>Start</Button>\n          <Button onClick={() => example.stopProcessing()}>Stop</Button>\n          <div>\n            {isProcessing}\n            <p>{example.whoAmI}</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","import { action, decorate } from \"mobx\";\n\nclass UiState {\n    \n    manager;\n\n    toggleSideBar = () => {\n        this.manager.updateSize();\n    }\n\n    getSelectedItem = () => {\n        return this.manager.getSelectedItem\n    }\n\n    setGoldenLayoutManager = (manager) => {\n        this.manager = manager;\n    }\n\n    closeAll = () => {\n        this.manager.closeAll();\n    }\n\n    openAll = componentsList => {\n        this.manager.openAll(componentsList);\n    }\n}\n\nexport default decorate(UiState, {\n    toggleSideBar: action,\n    getSelectedItem: action,\n    closeAll: action,\n    openAll: action\n});","import { observable, action, computed, decorate } from \"mobx\";\n\nclass Example {\n\n    isProcessing = false;\n    who = {\n        name: 'hoge',\n        desc: 'iam example stete class'\n    }\n    \n    startProcessing() {\n        this.isProcessing = true;\n    }\n\n    stopProcessing() {\n        this.isProcessing = false;\n    }\n\n    get whoAmI() {\n        const state = this.isProcessing ? 'Processing' : 'Sleeping'\n        return `name <${this.who.name}> : description ${this.who.desc} ${state}`\n    }\n\n}\n\nexport default decorate(Example, {\n    isProcessing: observable,\n    startProcessing: action,\n    stopProcessing: action,\n    whoAmI: computed\n})","import uiState from 'store/uistate';\nimport example from 'store/example';\n\nconst store = {\n    uiState: new uiState(),\n    example: new example()\n};\n\nexport default store;","import React from \"react\";\nimport { observer } from 'mobx-react';\nimport { Search } from \"components/DataEntry\";\nimport Home from 'pages/Home';\nimport store from 'store';\n\nclass HogeA extends React.PureComponent {\n    render() {\n      return (\n        <div id=\"panel\" className=\"fit\">\n          <h2>hogeA</h2>\n          <Search width={100} onSearch={this.props.onSearch} />\n        </div>\n      );\n    }\n  }\n  \n  class HogeB extends React.PureComponent {\n    render() {\n      return (\n        <div id=\"panel\" className=\"fit\">\n          <h2>hogeB</h2>\n          <Search width={100} onSearch={this.props.onSearch} />\n        </div>\n      );\n    }\n  }\nconst ItemConfig = [\n  { title: \"Hoge_A\", type: \"react-component\", key: \"hogeA\", component: HogeA },\n  { title: \"Hoge_B\", type: \"react-component\", key: \"hogeB\", component: HogeB },\n  { title: \"home\", type: \"react-component\", key: \"home\", component: observer(Home), props: { store: store, hoge: 'c'} }\n];\n\nexport { ItemConfig };","import { ItemConfig } from \"panels/panelDefs\";\n\nclass GoldenLayoutManager {\n\n    static instance;\n\n    static setInstance(instance) {\n        this.instance = instance;\n        this.initialize();\n    };\n\n    static initialize() {\n        this.registerComponent();\n        this.instance.init();\n        console.log('Successfully registered components!')\n    }\n\n    static registerComponent() {\n        ItemConfig.forEach(config => {\n          this.instance.registerComponent(config.key, config.component);\n        });\n    };\n\n    static updateSize() {\n        this.instance.updateSize();\n    }\n\n    static getSelectedItem() {\n        return this.instance.selectedItem;\n    }\n\n    static getComponentKeys() {\n        return ItemConfig.map(item => {\n            return item.key;\n        });\n    }\n\n    static openPanel(component) {\n          const targetComp = ItemConfig.find(item => {\n              return item.key === component;\n          });\n          const newItemConfig = {\n            title: component,\n            type: \"react-component\",\n            component: component,\n            props: targetComp.props\n          };\n          const lastItem = this.instance.root.contentItems;\n          lastItem[0].addChild(newItemConfig)\n    };\n\n    static closeAll() {\n        const contentItems = this.instance.root.contentItems || [];\n        if (contentItems.length > 0) {\n            while(contentItems[0].contentItems.length > 0) {\n                contentItems[0].removeChild(contentItems[0].contentItems[0])\n            }\n        }\n    }\n\n    static openAll() {\n        ItemConfig.forEach(component => {\n            this.openPanel(component.key);\n        })\n    }\n}\n\nexport default GoldenLayoutManager;","import React from \"react\";\nimport { Icon, Tooltip } from \"antd\";\n\nconst FolderMenuItem = props => {\n  const { isOpen, onClick, text } = props;\n  const name = isOpen ? \"folder-open\" : \"folder\";\n  return (\n    <span onClick={onClick} style={{ whiteSpace: \"nowrap\" }}>\n      <Icon type={name} style={{ marginRight: \"3px\" }} />\n      {text}\n    </span>\n  );\n};\n\nconst SideBarMenu = props => {\n  const { closeAll, openAll } = props;\n  return (\n    <div>\n      <ul className=\"sidebar-menu\">\n        <li className=\"sidebar-menu-item\">\n          <Tooltip placement=\"bottomRight\" title=\"Open All Tabs\">\n            <span onClick={openAll}>\n              <Icon type=\"folder-open\" />\n            </span>\n          </Tooltip>\n        </li>\n        <li className=\"sidebar-menu-item\">\n          <Tooltip placement=\"bottomRight\" title=\"Close All Tabs\">\n            <span onClick={closeAll}>\n              <Icon type=\"close-square\" />\n            </span>\n          </Tooltip>\n        </li>\n      </ul>\n    </div>\n  );\n};\n\nexport { FolderMenuItem, SideBarMenu };\n","import React from \"react\";\nimport GoldenLayoutManager from \"panels/GoldenLayoutManager\";\nimport { FolderMenuItem, SideBarMenu } from \"components/Icon\";\n\nconst COMPONENT_KEYS =  GoldenLayoutManager.getComponentKeys();\n\nclass SideBar extends React.PureComponent {\n\n  onClickMenuItem = componentName => {\n    GoldenLayoutManager.openPanel(componentName);\n  };\n\n  render() {\n    return (\n      <div className=\"fit sidebar\">\n        <div className=\"sidebar-title\">\n          <h4>TITLE</h4>\n        </div>\n        <SideBarMenu openAll={this.props.openAll} closeAll={this.props.closeAll} />\n        <ul id=\"menu-container\">\n          {COMPONENT_KEYS.map(key =>{\n            return <MenuItem key={key} onClick={this.onClickMenuItem} text={key} />\n          })}\n        </ul>\n      </div>\n    );\n  }\n}\n\nconst MenuItem = props => {\n  const { text, onClick } = props;\n  return (\n    <li className=\"sidebar-tab-item\">\n      <FolderMenuItem\n        text={text}\n        isOpen={false}\n        onClick={() => onClick(text)}\n      />\n    </li>\n  );\n};\n\nexport default SideBar;\n","const GoldenLayoutConfig = {\n  settings: {\n    hasHeaders: true,\n    constrainDragToContainer: true,\n    reorderEnabled: true,\n    selectionEnabled: true,\n    popoutWholeStack: false,\n    blockedPopoutsThrowError: true,\n    closePopoutsOnUnload: true,\n    showPopoutIcon: true,\n    showMaximiseIcon: true,\n    showCloseIcon: true\n  },\n  dimensions: {\n    borderWidth: 10,\n    minItemHeight: 50,\n    minItemWidth: 50,\n    headerHeight: 20,\n    dragProxyWidth: 300,\n    dragProxyHeight: 200\n  },\n  labels: {\n    close: \"close\",\n    maximise: \"maximise\",\n    minimise: \"minimise\",\n    popout: \"open in new window\"\n  },\n  content: [\n    {\n      type: \"row\",\n      isClosable: false,\n      content: []\n    }\n  ]\n};\n\nexport { GoldenLayoutConfig };","import React from \"react\";\nimport GoldenLayout from \"golden-layout\";\nimport SplitPane from \"react-splitter-layout\";\nimport SideBar from \"panels/SideBar\";\nimport GoldenLayoutManager from \"panels/GoldenLayoutManager\";\nimport { GoldenLayoutConfig } from \"config\";\n\nconst SIDEBAR_MIN_SIZE = 0;\nconst PANEL_MIN_SIZE = 85;\nconst PANEL_INITIALIZE_SIZE = 90;\nconst CUSTOM_SPLITTER_CLASSNAME = \"custom-splitter\";\n\nexport class Home extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.node = React.createRef();\n  }\n  componentDidMount() {\n    const instance = new GoldenLayout(\n      GoldenLayoutConfig,\n      window.$(\"#gl-container\")\n    );\n    GoldenLayoutManager.setInstance(instance);\n    this.props.store.uiState.setGoldenLayoutManager(GoldenLayoutManager);\n  }\n\n  render() {\n    const { uiState } = this.props.store;\n\n    return (\n      <div className=\"fit\">\n        <SplitPane\n         customClassName={CUSTOM_SPLITTER_CLASSNAME} \n          percentage={true}\n          secondaryInitialSize={PANEL_INITIALIZE_SIZE}\n          onDragEnd={uiState.toggleSideBar}\n          primaryMinSize={SIDEBAR_MIN_SIZE}\n          secondaryMinSize={PANEL_MIN_SIZE}\n        >\n          <SideBar openAll={uiState.openAll} closeAll={uiState.closeAll} toggleSideBar={uiState.toggleSideBar} />\n          <div id=\"gl-container\">\n            <div className=\"container-header\">\n              <h4>私の 2 つの人格には共通の記憶がある</h4>\n            </div>\n            <div ref={node => (this.node = node)} />\n          </div>\n        </SplitPane>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { Home } from 'panels/Home';\nimport \"golden-layout/src/css/goldenlayout-base.css\";\nimport \"golden-layout/src/css/goldenlayout-dark-theme.css\";\nimport \"react-splitter-layout/lib/index.css\";\nimport 'antd/dist/antd.css';\nimport 'index.css';\nimport store from 'store';\nimport { observer } from 'mobx-react';\n\nobserver(Home)\n\nfunction App() {\n  return (\n    <div className=\"fit\">\n      <Home store={store} ref={React.createRef()}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport $ from \"jquery\";\n\nfunction init() {\n    window.React = React;\n    window.ReactDOM = ReactDOM;\n    window.$ = $;\n}\n\nexport { init };","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { init } from 'initialize';\n\n\ninit();\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}