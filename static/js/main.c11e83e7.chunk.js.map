{"version":3,"sources":["components/DataEntry.js","panels/panelDefs.js","panels/GoldenLayoutManager.js","panels/SideBar.js","config.js","panels/Home.js","App.js","serviceWorker.js","initialize.js","index.js"],"names":["Search","Input","SearchBase","props","placeholder","onSearch","width","console","log","react_default","a","createElement","onPressEnter","e","target","value","style","concat","ItemConfig","title","type","key","component","id","className","DataEntry_SearchBase","this","React","PureComponent","GoldenLayoutManager","instance","initialize","registerComponent","init","_this","forEach","config","newItemConfig","root","contentItems","addChild","SideBar","addMenuItem","text","element","document","textContent","getElementById","append","addEventListener","openPanel","innerText","GoldenLayoutConfig","settings","hasHeaders","constrainDragToContainer","reorderEnabled","selectionEnabled","popoutWholeStack","blockedPopoutsThrowError","closePopoutsOnUnload","showPopoutIcon","showMaximiseIcon","showCloseIcon","dimensions","borderWidth","minItemHeight","minItemWidth","headerHeight","dragProxyWidth","dragProxyHeight","labels","close","maximise","minimise","popout","content","isClosable","Home","_React$PureComponent","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","node","createRef","inherits","createClass","GoldenLayout","window","$","setInstance","_this2","lib_default","secondaryInitialSize","panels_SideBar","ref","App","Home_Home","Boolean","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c11e83e7.chunk.js","sourcesContent":["import React from \"react\";\nimport { Input } from \"antd\";\n\nconst { Search } = Input;\n\nconst SearchBase = props => {\n    const { placeholder, onSearch, width } = props;\n    console.log(onSearch)\n    return (\n        <Search\n        placeholder={placeholder}\n        onSearch={onSearch}\n        onPressEnter={e => onSearch(e.target.value)}\n        style={{ \"width\": `${width}px` }}\n      />\n    )\n};\n\nexport { SearchBase as Search };\n","import React from \"react\";\nimport { Search } from \"components/DataEntry\";\nclass HogeA extends React.PureComponent {\n    render() {\n      return (\n        <div id=\"panel\" className=\"fit\">\n          <h2>hogeA</h2>\n          <Search width={100} onSearch={this.props.onSearch} />\n        </div>\n      );\n    }\n  }\n  \n  class HogeB extends React.PureComponent {\n    render() {\n      return (\n        <div id=\"panel\" className=\"fit\">\n          <h2>hogeB</h2>\n          <Search width={100} onSearch={this.props.onSearch} />\n        </div>\n      );\n    }\n  }\nconst ItemConfig = [\n  { title: \"Hoge_A\", type: \"react-component\", key: \"hogeA\", component: HogeA },\n  { title: \"Hoge_B\", type: \"react-component\", key: \"hogeB\", component: HogeB }\n];\n\nexport { ItemConfig };","import { ItemConfig } from \"panels/panelDefs\";\n\n\nclass GoldenLayoutManager {\n\n    static instance;\n\n    static setInstance(instance) {\n        this.instance = instance;\n        this.initialize();\n    };\n\n    static initialize() {\n        this.registerComponent();\n        this.instance.init();\n        console.log('Successfully registered components!')\n    }\n\n    static registerComponent() {\n        ItemConfig.forEach(config => {\n          this.instance.registerComponent(config.key, config.component);\n        });\n    };\n\n    static openPanel(component) {\n        let newItemConfig = {\n            title: component,\n            type: \"react-component\",\n            component: component\n          };\n          console.log(this.instance)\n          console.log(component)\n          const lastItem = this.instance.root.contentItems;\n          lastItem[0].addChild(newItemConfig);\n    };\n}\n\nexport default GoldenLayoutManager;","import React from \"react\";\nimport GoldenLayoutManager from \"panels/GoldenLayoutManager\";\n\nclass SideBar extends React.PureComponent {\n  componentDidMount() {\n    let addMenuItem = text => {\n      var element = document.createElement(\"li\");\n      element.textContent = text;\n      document.getElementById(\"menu-container\").append(element);\n      element.addEventListener(\"click\", e => {\n        GoldenLayoutManager.openPanel(e.target.innerText);\n      });\n    };\n    addMenuItem(\"hogeA\");\n    addMenuItem(\"hogeB\");\n  }\n  render() {\n    return (\n      <div>\n        <ul id=\"menu-container\" />\n      </div>\n    );\n  }\n}\n\nexport default SideBar;\n","const GoldenLayoutConfig = {\n  settings: {\n    hasHeaders: true,\n    constrainDragToContainer: true,\n    reorderEnabled: true,\n    selectionEnabled: false,\n    popoutWholeStack: false,\n    blockedPopoutsThrowError: true,\n    closePopoutsOnUnload: true,\n    showPopoutIcon: true,\n    showMaximiseIcon: true,\n    showCloseIcon: true\n  },\n  dimensions: {\n    borderWidth: 10,\n    minItemHeight: 50,\n    minItemWidth: 50,\n    headerHeight: 20,\n    dragProxyWidth: 300,\n    dragProxyHeight: 200\n  },\n  labels: {\n    close: \"close\",\n    maximise: \"maximise\",\n    minimise: \"minimise\",\n    popout: \"open in new window\"\n  },\n  content: [\n    {\n      type: \"row\",\n      isClosable: false,\n      content: []\n    }\n  ]\n};\n\nexport { GoldenLayoutConfig };","import React from \"react\";\nimport GoldenLayout from \"golden-layout\";\nimport SideBar from \"panels/SideBar\";\nimport SplitPane from \"react-splitter-layout\";\nimport { GoldenLayoutConfig } from \"config\";\nimport GoldenLayoutManager from \"panels/GoldenLayoutManager\";\n\nexport class Home extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.node = React.createRef();\n  }\n  componentDidMount() {\n    const instance = new GoldenLayout(\n      GoldenLayoutConfig,\n      window.$(\"#gl-container\")\n    );\n    GoldenLayoutManager.setInstance(instance);\n  }\n\n  render() {\n    return (\n      <div className=\"fit\">\n        <SplitPane secondaryInitialSize={800}>\n          <SideBar />\n          <div>\n            <div id=\"gl-container\">\n              <div ref={node => (this.node = node)} />\n            </div>\n          </div>\n        </SplitPane>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { Home } from 'panels/Home';\nimport \"golden-layout/src/css/goldenlayout-base.css\";\nimport \"golden-layout/src/css/goldenlayout-dark-theme.css\";\nimport \"react-splitter-layout/lib/index.css\";\nimport 'antd/dist/antd.css';\nimport 'index.css';\n\nfunction App() {\n  return (\n    <div className=\"fit\">\n      <Home ref={React.createRef()}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport $ from \"jquery\";\n\nfunction init() {\n    window.React = React;\n    window.ReactDOM = ReactDOM;\n    window.$ = $;\n}\n\nexport { init };","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { init } from 'initialize';\n\ninit();\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}