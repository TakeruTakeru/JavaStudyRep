{"version":3,"sources":["panels/SideBar.js","components/DataEntry.js","panels/Home.js","App.js","serviceWorker.js","index.js"],"names":["SideBar","react_default","a","createElement","id","React","PureComponent","Search","Input","SearchBase","props","placeholder","onSearch","width","console","log","onPressEnter","e","target","value","style","concat","window","ReactDOM","HogeA","DataEntry_SearchBase","this","HogeB","Home","_React$PureComponent3","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","setNode","bind","assertThisInitialized","node","createRef","inherits","createClass","key","_this2","instance","GoldenLayout","content","type","title","component","document","getElementById","registerComponent","init","text","element","textContent","append","newItemConfig","addEventListener","root","contentItems","addChild","addMenuItem","className","lib_default","secondaryInitialSize","panels_SideBar","ref","App","Home_Home","Boolean","location","hostname","match","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ac819311.chunk.js","sourcesContent":["import React from \"react\";\n\nclass SideBar extends React.PureComponent {\n\n    render () {\n        return (\n            <div>\n                <ul id=\"menu-container\" />\n            </div>\n        )\n    }\n}\n\nexport default SideBar;","import React from \"react\";\nimport { Input } from \"antd\";\n\nconst { Search } = Input;\n\nconst SearchBase = props => {\n    const { placeholder, onSearch, width } = props;\n    console.log(onSearch)\n    return (\n        <Search\n        placeholder={placeholder}\n        onSearch={onSearch}\n        onPressEnter={e => onSearch(e.target.value)}\n        style={{ \"width\": `${width}px` }}\n      />\n    )\n};\n\nexport { SearchBase as Search };\n","import GoldenLayout from \"golden-layout\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport SideBar from \"panels/SideBar\";\nimport { Search } from \"components/DataEntry\";\nimport { FolderIcon } from \"components/Icon\";\nimport SplitPane from 'react-splitter-layout';\nimport 'react-splitter-layout/lib/index.css';\nwindow.React = React;\nwindow.ReactDOM = ReactDOM;\n\n\n\nclass HogeA extends React.PureComponent {\n  render() {\n    return (\n      <div id=\"hogeA\">\n        <h2>hogeA</h2>\n        <Search width={100} onSearch={this.props.onSearch} />\n      </div>\n    );\n  }\n}\n\nclass HogeB extends React.PureComponent {\n  render() {\n    return (\n      <div id=\"hogeB\">\n        <h2>hogeB</h2>\n        <Search width={100} onSearch={this.props.onSearch} />\n      </div>\n    );\n  }\n}\n\nexport class Home extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.setNode = this.setNode.bind(this);\n    this.node = React.createRef();\n    \n  }\n  componentDidMount() {\n    const config = {\n      content: [\n        {\n          type: \"row\",\n          content: [\n            {\n              type: \"stack\",\n              width: 60,\n              content: [\n                {\n                  title: \"A react component\",\n                  type: \"react-component\",\n                  component: \"HogeA\",\n                },\n                {\n                  title: \"Another react component\",\n                  type: \"react-component\",\n                  component: \"HogeB\",\n                }\n              ]\n            }\n          ]\n        }\n      ]\n    };\n    /* you can pass config as prop, or use a predefined one */\n    const instance = new GoldenLayout(\n      config,\n      document.getElementById(\"gl-container\")\n    );\n    instance.registerComponent(\"HogeA\", HogeA);\n    instance.registerComponent(\"HogeB\", HogeB);\n    /* register components or bind events to your new instance here */\n    instance.init();\n    this.instance = instance;\n    let addMenuItem = (title, text) => {\n        var element = document.createElement('li');\n        element.textContent = text;\n        document.getElementById(\"menu-container\").append(element);\n      \n        var newItemConfig = {\n          title: title,\n          type: \"react-component\",\n          component: \"HogeA\",\n        };\n\n        element.addEventListener('click', () => {\n            console.log(this.instance)\n          this.instance.root.contentItems[0].addChild(newItemConfig);\n        });\n      };\n    addMenuItem('HogeA', 'HogeA');\n  }\n\n  setNode(node) {\n    this.node = node;\n  }\n\n  render() {\n    return (\n      <div className=\"fit\">\n        <SplitPane secondaryInitialSize={800}>\n        <SideBar />\n        <div id=\"gl-container\" className=\"fit\">\n          <div ref={this.setNode} />\n        </div>\n        </SplitPane>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { Home } from 'panels/Home';\nimport 'antd/dist/antd.css';\n\nfunction App() {\n  return (\n    <div className=\"fit\">\n      <Home ref={React.createRef()}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}